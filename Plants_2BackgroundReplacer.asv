clc;
clear;
close all hidden;

img = imread("Plants_2/test/Alstonia Scholaris diseased (P2a)/0014_0006.JPG");

img = imresize(img, 0.5, 'bicubic');
img_hsv = rgb2hsv(img);

% imtool(img)
% imtool(img_hsv)
% imtool(img_gray)

img_to_detect = img;
mask = zeros(size(img, 1), size(img_hsv, 2));

index = find(img(:, :, 1) < img(:, :, 2) & img(:, :, 3) < img(:, :, 2));
mask(index) = 1;
mask = imfill(mask);

% mask = ~DetectBackground(img);





true_img = uint8( bsxfun(@times, double(img), double(mask)) );

% imtool(true_img);
true_img_hsv = rgb2hsv(true_img);
% imtool(true_img_hsv)

index = find(true_img_hsv(:, :, 1) < 0.75 & ...
                true_img_hsv(:, :, 2) < 0.10 & true_img_hsv(:, :, 3) < 0.25);

mask = zeros(size(img, 1), size(img_hsv, 2));
mask(index) = 1;
mask = ~mask;
% imtool(mask);


true_img = uint8( bsxfun(@times, double(true_img), double(mask)) );
% imtool(true_img);
grey_img = rgb2gray(true_img);

img_labeled = bwlabel(grey_img, 4);
max(max(img_labeled));
allAreas = regionprops(img_labeled, 'Area');
areas = [allAreas.Area];
leaf_area = max(max(areas));
leaf_group = zeros()
leaf_group = img_labeled(img_labeled == find(areas == leaf_area));
% for i = 1:length(img_labeled)
%     if img_labeled(i) ~= leaf_group
%         fprintf("triggered")
%         img_labeled(i) = 0;
%     end
% end
imtool(leaf_group);


function mask = DetectBackground(img)
    
    img_hsv = rgb2hsv(img);
    mask = zeros(size(img, 1), size(img_hsv, 2));

    R = img(:,:,1);
    G = img(:,:,2);
    B = img(:,:,3);
    
    % Compute absolute differences
    diffRG = abs(R - G);
    diffRB = abs(R - B);
    diffGB = abs(G - B);
    
    % Threshold to decide "similarity"
    threshold = 2;
    mask = (diffRG < threshold) & (diffRB < threshold) & (diffGB < threshold) & (R < 90);

    % index = find(img_hsv(:, :, 1) > 0.25 & img_hsv(:, :, 1) < 0.70 & ...
    %                 img_hsv(:, :, 2) < 0.65 ...
    %                 & img_hsv(:, :, 3) < 0.55);
    
    % mask(index) = 1;
    imtool(mask)
    
    % Filtering
    mask = medfilt2(mask,[6, 6]);
    
    % Get median with helper function
    med = GetMedian(mask);

    % Morphing and Filtering mask
    big_radius = floor(sqrt(med) / 6);
    small_radius = floor(sqrt(med) / 6);
    big_disk = strel("disk", big_radius);
    small_disk = strel('disk', small_radius);

    
    % Initial Morphing
    mask = imclose(mask, big_disk);
    mask = imopen(mask, small_disk);
    
    % More Morphing
    % Bigger disk for closing to merge fragments
    closing_disk = strel('disk', big_radius);
    mask = imclose(mask, closing_disk);
    
    % Smaller disk for opening to remove small junk
    opening_disk = strel('disk', small_radius);
    mask = imopen(mask, opening_disk);

    imtool(mask);
    
end


function [m, areas] = GetMedian(mask)
    cc = bwlabel(mask, 8);
    allAreas = regionprops(cc, 'Area');
    areas = [allAreas.Area];
    if isempty(areas)
        m = 0;
    else
        m = median(areas);
    end
end



function [horEdges, vertEdges, edgeSum, gradMag, gradDir, highMagDir] = sobel(gray)
    dfdx_filter = [-0.125 0 0.125; -0.25 0 0.25; -0.125 0 0.125];
    dfdy_filter = [0.125 0.25 0.125; 0 0 0; -0.125 -0.25 -0.125];
    % altereddxfilter = [-2 0 2; -1 0 1; -2 0 2] ./ 10;
    % altereddyfilter = [2 1 2; 0 0 0; -2 -1 -2] ./ 10;
    vertEdges = filter2(dfdx_filter, gray);
    horEdges = filter2(dfdy_filter, gray);
    % vertEdges = filter2(altereddxfilter, gray);
    % horEdges = filter2(altereddyfilter, gray);
    edgeSum = vertEdges + horEdges;
    gradMag = sqrt((vertEdges).^2 + (horEdges).^2);
    gradDir = (atan2(horEdges, vertEdges) + pi) .* (255 / (2 * pi));
    highMagDir = zeros(size(gray));
    thresh = 0.12;
    highMagDir(gradMag > thresh) = gradDir(gradMag > thresh);
    % imtool(gradMag);
    % imtool(gradDir);
    % imtool(highMagDir);
end
